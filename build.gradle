buildscript {
    ext {
        kotlin_version = '1.3.30'
        kotlin_coroutines_version = '1.1.1'
        dokka_version = '0.9.18'
        jvm_version = '1.8'
        detekt_version = '1.0.0-RC14'
        // Version to publish
        watchable_version = '0.6.7'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0"
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC14"
    id "org.sonarqube" version "2.7"
    id "com.jfrog.bintray" version "1.8.4"
    id "maven-publish"
}

apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'java-library'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = ext.watchable_version
group = 'io.gladed'
//name = "watchable" (done in settings.gradle)
description = "Listenable data structures using Kotlin coroutines"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Transitively supply all kotlin APIs to our users
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileKotlin.kotlinOptions {
    allWarningsAsErrors = true
    jvmTarget = "$ext.jvm_version"
    freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "$ext.jvm_version"
    freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    testLogging {
        events "failed"
        showExceptions = true
        exceptionFormat = "full"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    sourceDirectories.setFrom(files(["${project.projectDir}/src/main/kotlin"]))
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

afterEvaluate {
    jacocoTestCoverageVerification.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}

detekt {
    input = files("$projectDir/src/main")
    baseline = file("$projectDir/src/config/baseline.xml")
}

dokka {
    outputDirectory = "$buildDir/javadoc"
    outputFormat = "javadoc"
    externalDocumentationLink {
        url = new URL("http://docs.oracle.com/javase/8/docs/api/")
    }
}

task dokkaGfm(type: org.jetbrains.dokka.gradle.DokkaTask){
    outputDirectory = "$buildDir/gfm"
    outputFormat = "gfm"
}

license {
    skipExistingHeaders = true
    header = rootProject.file('src/config/header')
    mapping("fxml", "XML_STYLE")
    excludes(["**/*.md"])
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = "javadoc"
    from dokka.outputDirectory
}

task printVersion {
    println(version)
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = project.properties['bintray.user']
    key = project.properties['bintray.key']
    publications = ['mavenPublication']
    pkg {
        repo = project.name
        name = project.name
        userOrg = 'gladed'
        licenses = [ 'Apache-2.0' ]
        vcsUrl = 'https://github.com/gladed/watchable.git'
        version {
            name = project.version
            desc = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId = project.name
            version project.version
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/gladed/watchable'
                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://github.com/gladed/watchable/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'gladed'
                        name = 'Glade Diviney'
                        email = 'gladed@glamber.com'
                    }
                }
                scm {
                    url = 'https://github.com/gladed/watchable'
                    connection = 'scm:git:git://github.com/gladed/watchable.git'
                    developerConnection = 'scm:git:ssh://git@github.com:gladed/watchable.git'
                }
            }
        }
    }
}

